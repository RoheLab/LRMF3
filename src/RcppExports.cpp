// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// colSums_svd_like_impl
arma::vec colSums_svd_like_impl(const arma::mat& U, const arma::rowvec& d, const arma::mat& V, const int num_threads);
RcppExport SEXP _LRMF3_colSums_svd_like_impl(SEXP USEXP, SEXP dSEXP, SEXP VSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const int >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(colSums_svd_like_impl(U, d, V, num_threads));
    return rcpp_result_gen;
END_RCPP
}
// masked_approximation_impl
arma::sp_mat masked_approximation_impl(const arma::mat& U, const arma::mat& V, const arma::vec& row, const arma::vec& col);
RcppExport SEXP _LRMF3_masked_approximation_impl(SEXP USEXP, SEXP VSEXP, SEXP rowSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type row(rowSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(masked_approximation_impl(U, V, row, col));
    return rcpp_result_gen;
END_RCPP
}
// rowSums_svd_like_impl
arma::vec rowSums_svd_like_impl(const arma::mat& U, const arma::rowvec& d, const arma::mat& V, const int num_threads);
RcppExport SEXP _LRMF3_rowSums_svd_like_impl(SEXP USEXP, SEXP dSEXP, SEXP VSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const int >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSums_svd_like_impl(U, d, V, num_threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LRMF3_colSums_svd_like_impl", (DL_FUNC) &_LRMF3_colSums_svd_like_impl, 4},
    {"_LRMF3_masked_approximation_impl", (DL_FUNC) &_LRMF3_masked_approximation_impl, 4},
    {"_LRMF3_rowSums_svd_like_impl", (DL_FUNC) &_LRMF3_rowSums_svd_like_impl, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_LRMF3(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
